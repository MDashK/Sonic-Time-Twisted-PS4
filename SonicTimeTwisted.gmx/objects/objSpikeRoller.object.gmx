<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSpikeRoller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objSolid</parentName>
  <maskName>sprSpikeRollerPlatformMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>harm = instance_create(x,y,objSpikeRollerHarmful);
reaction_script = player_reaction_spike_roller;
active=false;
player_id = noone;
image_speed=.25;
allow_collision = true;
mode=1;
remove=0;
time=0.03125;
distance=64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allow_collision = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle state
if not active
{
    player_id=noone;
}
else
{
    with player_id {
    
    // check for death and stop collisions
        
            // Make sure death isn't happening
            if state ==player_state_dead { player_id = noone; }
            // reset local terrain list
            player_get_terrain_list();
            
            // update underwater state
            player_update_water();
            
            
            // non-solid object collision
            player_collision_object();
                
                
            
            // wall collision
            hit_wall = player_collision_wall(offset_wall);
            // handle wall collision
            if hit_wall
            {
            // eject
                wall_direction = player_wall_eject(hit_wall);
                // get crushed if applicable
                if wall_direction==0 and (hit_wall.harmful or terrain_id.harmful)
                {
                    play_sfx(sndHurt, 4);
                    player_is_dead();
                    other.player_id=noone;
                }
            // execute reaction
            if player_get_reaction(hit_wall, wall_direction) exit;
            // if moving towards wall
            if wall_direction!=0 and sign(xspeed)==wall_direction
            {
                // cut speed
                xspeed = 0;
                // push against wall
                if facing==wall_direction player_wall_push(hit_wall, wall_direction);
                }
            other.active = false;
            other.allow_collision = true;
            other.alarm[0] = 20; 
            
            player_is_falling();
            
            
            
}
        else if state != player_state_hurt or state !=player_state_dead {
            x = other.x;
            y = other.y-48;
        }
        
        // jumping
        if input_check_pressed(cACTION) and not player_collision_ceiling(offset_y+5){
            
            other.active = false; 
            player_is_jumping();
            
        
            
        
        }
        
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///harmful object position
 
 harm.x=x;
 harm.y=y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform behavoir
switch mode
{
case 1: x = floor(xstart+cos((objScreen.image_index)*time)*distance); break;
case 2: x = floor(xstart+sin(objScreen.image_index*time)*distance); break;
case 3: y = floor(ystart+cos((objScreen.image_index)*time)*distance); break;
case 4: y = floor(ystart+sin(objScreen.image_index*time)*distance); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
