<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>objInputMethodDependant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg = noone;
em_sprite = noone;
other_em_sprite = noone;
level = 0;
if objProgram.in_past {
    level = objProgram.special_past_current_level;
    other_level = objProgram.special_future_current_level;
    em_sprite = sprSSStone;
    other_em_sprite = sprSSEmerald;
    switch(objProgram.special_past_current_level)
    {
        case 1:
            bg = backSSPast1;
            break;
        case 2:
            bg = backSSPast2;
            break;
        case 3:
            bg = backSSPast3;
            break;
        case 4:
            bg = backSSPast4;
            break;
        case 5:
            bg = backSSPast5;
            break;
        case 6:
            bg = backSSPast6;
            break;
        default:
            bg = backSSPast7;
            break;
    }
} else {
    level = objProgram.special_future_current_level;
    other_level = objProgram.special_past_current_level;
    em_sprite = sprSSEmerald;
    other_em_sprite = sprSSStone;
    switch(objProgram.special_future_current_level)
    {
        case 1:
            bg = backSSFuture1;
            break;
        case 2:
            bg = backSSFuture2;
            break;
        case 3:
            bg = backSSFuture3;
            break;
        case 4:
            bg = backSSFuture4;
            break;
        case 5:
            bg = backSSFuture5;
            break;
        case 6:
            bg = backSSFuture6;
            break;
        default:
            bg = backSSFuture7;
            break;
    }
}
bg_x = view_wview[view_current]/2 - background_get_width(bg);
bg_y = (view_hview[view_current] - background_get_height(bg))/2;
em_x = view_wview[view_current]/2 - 17 * (level - 1);
em_y = 96;
oem_x = view_wview[view_current]/2 - 8 * (other_level - 1);
oem_y = 116;
alarm[0] = 10;
menu = instance_create(x, y, objMenu);
// this one is useful for ports
ss_instructions_override = false;
ss_instructions1 = "";
ss_instructions2 = "";
// if we're playing this using the level select, then a different BGM plays
// and we get a menu instead of a countdown
if(objProgram.saveSlot == -2)
{
    set_zone_music(room);
    play_music_intro(objMusic.musicIntroAsset, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(menu)
{
    menu_fn_open_menu(menu_part_sstage_levelselect_result_items, true, other.is_touchscreen);
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objProgram.saveSlot &gt; -2) // if we are playing this in the mini-game/level select mode, lives don't appear
{
    var score_card = instance_create(64, 0, objSSScoreCard);
    score_card.visible = true;
    if(ss_instructions_override)
    {
        score_card.ss_instructions1 = ss_instructions1;
        score_card.ss_instructions2 = ss_instructions2;
    }
}
else
{
    // if we're playing this using the level select, we get a menu instead of a countdown
    alarm[1] = 80;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Only show the menu in level select mode
if(objProgram.saveSlot == -2)
{
    if(menu.state != 0)
    {
        with(menu)
        {
            event_user(2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Only show the menu in level select mode
if(objProgram.saveSlot == -2)
{
    if(menu.state != 0)
    {
        with(menu)
        {
            event_user(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objProgram.saveSlot == -2)
{
    if(menu.state != 0)
    {
        with(menu)
        {
            event_user(0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_background_ext(bg, bg_x, bg_y, 2, 1, 0, c_white, 0.2);
if(objProgram.saveSlot &gt; -2) // emeralds only appear in regular gameplay mode
{
    for(var i = 0; i &lt; level; i++)
    {
        draw_sprite_ext(em_sprite, i, em_x + i*34, em_y, 0.7, 0.7, 0, c_white, 1);
    }
    for(var i = 0; i &lt; other_level; i++)
    {
        draw_sprite_ext(other_em_sprite, i, oem_x + i*16, oem_y, 0.35, 0.35, 0, c_white, 1);
    }
}
else
{
    if(menu.state &gt; 0) // putting this condition first because of how GML works
    {
        with(menu)
        {
            event_user(3);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
