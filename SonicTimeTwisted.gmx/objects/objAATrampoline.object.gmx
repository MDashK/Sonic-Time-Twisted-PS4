<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprExampleCollapsingBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
reaction_script = player_reaction_AA_trampoline;
player_id = noone;
active = false;
height = 0;
angle = 0;
force_x = 0;
force_y = -12;
ox = bbox_left;
oy = bbox_top;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle state
if not active
{
    // normalize height
    if (height&gt;0)
    {
        // slowly return to neutral
        height = max(height-0.4, 0);
        // wind down
        angle = (angle+45) mod 360;
        oy = bbox_top+cosine[angle]*height;
        // reset collision point
        if height==0 ox = bbox_left;
    }
}
else
{
    // control player
    with player_id
    {
        // horizontal motion
        if (floor(x)-offset_x&lt;other.bbox_left) xspeed = (other.bbox_left-(floor(x)-offset_x))*0.2; else
        if (floor(x)+offset_x&gt;other.bbox_right) xspeed = (other.bbox_right-(floor(x)+offset_x))*0.2; else
        xspeed = 0;
        // slow descent
        yspeed *= 0.8;
        // apply movement
        x += xspeed;
        y += yspeed;
        // update offsets
        other.ox = x;
        other.oy = floor(y)+offset_y;
        // launch from trampoline
        if (yspeed&lt;0.1)
        {
            // lift trampoline line
            other.active = false;
            other.height = 16;
            other.angle = 0;
            other.player_id = noone;
            // animate
            timeline_speed = 1;
            // states and flags
            state = player_state_fall;
            // movement and collision
            xspeed = other.force_x;
            yspeed = other.force_y; 
            // sound
            play_sfx(sndAATrampoline, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render trampoline
var w1, w2, h, t, d, j, k;
// setup
w1 = ox-bbox_left;
w2 = ox-bbox_right;
h = oy-bbox_top;
// trampoline line
draw_set_color(c_yellow);
for (t=0; t&lt;1; t+=0.2)
{
    d = t+0.2;
    j = t*t;
    k = d*d;
    draw_line_width(bbox_left+w1*j, bbox_top+h*t, bbox_left+w1*k, bbox_top+h*d, 2);
    draw_line_width(bbox_right+w2*j, bbox_top+h*t, bbox_right+w2*k, bbox_top+h*d, 2);
}
// trampoline stands
draw_sprite(sprAATrampoline, 0, bbox_left, y);
draw_sprite(sprAATrampoline, 0, bbox_right, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
