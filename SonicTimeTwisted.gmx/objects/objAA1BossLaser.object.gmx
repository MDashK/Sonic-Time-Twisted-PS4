<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLaserMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_blend = c_red;
direction = 206;
remove = 2;
reaction_script = player_reaction_harmful;
// states and flags
state = 0;
// movement
ox = x;
oy = y;
distance = 0;
pattern = 0;
firing_speed = 4;
sweeping_speed = 2;
// other
parent_id = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>sndMetalLaser</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>sndMetalLaser</sound>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State machine
// lock to parent position (if we're not disappearing)
if state&gt;-1 {x = parent_id.x; y = parent_id.y;}
// increase distance (also necessary to re-find target)
distance += firing_speed;
// set offset
var sx = lengthdir_x(distance, direction);
var sy = lengthdir_y(distance, direction);
ox = x+sx;
oy = y+sy;
// if we find our target
if (state!=0) and collision_line(x, y, ox, oy, objAA1BossFloor, 1, 1)
{
    // re-adjust until we're barely touching
    while (abs(sx)&gt;=1) or (abs(sy)&gt;=1) {sx *= 0.5; sy *= 0.5; if collision_line(x, y, ox, oy, objAA1BossFloor, 1, 1) {ox -= sx; oy -= sy;} else {ox += sx; oy += sy;}}
    distance = point_distance(x, y, ox, oy);
}
// handle state
switch state
{
case -1: // scale down until we disappear
    if distance&lt;1 or x&lt;29 or y&gt;499 or collision_circle(x, y, 3, objAA1BossFloor, 1, 1) instance_destroy();
    break;
case 0: // continue if we reach the floor
    if collision_line(x, y, ox, oy, objAA1BossFloor, 1, 1) or ox&lt;29 or oy&gt;499 state = 1;
    break;
case 1: // execute attack pattern
    // determine pattern
    switch pattern
    {
    case 0: // sweep upward
        if direction&gt;180 direction = angle_wrap(direction-sweeping_speed); else {speed = firing_speed; state = -1;}
        break;
    case 1: // sweep downward
        if direction&lt;275 direction = angle_wrap(direction+sweeping_speed); else {speed = firing_speed; state = -1;}
        break;
    case 2: // spread
        if image_xscale&lt;2.5 image_xscale += 0.015625 else {speed = firing_speed; state = -1;}
        break;
    default:
        speed = firing_speed;
        state = -1;
    }
    // tell metal to stop firing
    if (state==-1) {parent_id.firing = false; parent_id.alarm[1] = 30;}
    break;
}
// animate
visible = !visible;
image_angle = direction+90;
image_yscale = distance/33;
if (pattern==2) image_yscale += (image_xscale*0.375);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>pattern</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render laser (spread)
draw_set_color(image_blend);
draw_set_alpha(image_alpha);
draw_primitive_begin(pr_trianglestrip);
draw_vertex(floor(x), floor(y)-1);
draw_vertex(floor(x)+3, floor(y)+2);
draw_vertex(floor(ox-3-(16*image_xscale)), floor(oy-1.5-(16*image_xscale)*0.5));
draw_vertex(floor(ox+3+(16*image_xscale)), floor(oy+1.5+(16*image_xscale)*0.5));
draw_primitive_end();
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render laser (beam)
draw_set_color(image_blend);
draw_set_alpha(image_alpha);
draw_primitive_begin(pr_trianglestrip);
draw_vertex(floor(x), floor(y)-1);
draw_vertex(floor(x)+3, floor(y)+2);
draw_vertex(floor(ox)-3, floor(oy)-1.5);
draw_vertex(floor(ox)+3, floor(oy)+1.5);
draw_primitive_end();
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
