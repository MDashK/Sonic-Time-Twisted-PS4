<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>objSceneObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize background
// parallax_create(tiled, back, left, top, width, height, hspeed, vspeed, relative_x,
//                  relative_y, absolute_x, absolute_y, separation_x, separation_y);
// parallax_create_sprite(tiled, sprite, imgspeed, hspeed, vspeed, relative_x, relative_y,
//                          absolute_x, absolute_y, separation_x, separation_y);

var relative_y;
// defaults
surface = -1;
relative_y = (room_height-320)/(room_height-objScreen.height);
parallax_create(1, backPPZHills, 0, 0, 144, 48, 0, 0, 0.86, relative_y, 0, 212, 0, 0);
parallax_create(1, backPPZMountain, 0, 0, 144, 48, 0, 0, 0.9, relative_y, 0, 129, 0, 0);
parallax_create(1, backPPZPipe, 0, 0, 112, 70, 0, 0, .84, relative_y, 0, 260, 0, 0);
// lava
parallax_create(1, backPPZLava, 0, 0, 64, 16, -.1, 0, 0.9, relative_y, 0, 170, 0, 0);
parallax_create(1, backPPZLava, 0, 16, 64, 16, -.15, 0, 0.9, relative_y, 0, 186, 0, 0);
parallax_create(1, backPPZLava, 0, 32, 64, 32, -.2, 0, 0.9, relative_y, 0, 202, 0, 0);
parallax_create(1, backPPZLava, 0, 32, 64, 32, -.25, 0, 0.9, relative_y, 0, 234, 0, 0);
instance_create(0,0,objPPBackEarth);
//parallax_create(0, backPPZPlanet, 0, 0, 152, 64, 0, 0, 1, relative_y, 128, 96, 0, 0);
// sun
//instance_create(0, 0, objNebula);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Nebula Shader
angle_change = 2;
angle_warp = -15;
scale = 1.1;
sampler_index_warp = shader_get_sampler_index(NebulaShader, "warp");
surface_warp = -1;
copy_surface = -1;
texture_warp = pointer_null;
whirl_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (surface_exists(surface_warp)) surface_free(surface_warp);
if (surface_exists(copy_surface)) surface_free(copy_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>whirl_angle += angle_change;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (surface_exists(surface_warp)) surface_free(surface_warp);
if (surface_exists(copy_surface)) surface_free(copy_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render PP background to the surface.

var clean = false;
var shift = -128 * scale;

if not surface_exists(surface_warp) {
    surface_warp = surface_create(256,256);
    clean = true;
    texture_warp = surface_get_texture(surface_warp);
}

if not surface_exists(copy_surface) {
    copy_surface = surface_create(256,256);
}

surface_copy(copy_surface, 0, 0, surface_warp);

surface_set_target(surface_warp);

if (clean) draw_clear_alpha(c_black, 0);
d3d_transform_set_rotation_z(angle_warp);
d3d_transform_add_translation(128, 128, 0);
draw_surface_ext(copy_surface, shift, shift, scale, scale, 0, c_white, 1);
d3d_transform_set_identity();
draw_sprite_ext(WhirlSpr, 0, 128, 128, 1, 1, whirl_angle, c_white, 1);

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render background to surface
shader_set(NebulaShader);
texture_set_stage(sampler_index_warp, texture_warp);
draw_background(NebulaBkg, view_xview[view_current]-42, view_yview[view_current]-128);
shader_reset();
with objParallax event_perform(ev_draw, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
