<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
enum MUSIC_STATE {
    SILENCE,     // 0
    MUSIC_INTRO, // 1
    MUSIC_LOOP,  // 2
    BOSS_INTRO,  // 3
    BOSS_LOOP,   // 4
    JINGLE,      // 5
    EFFECT       // 6
};

state = MUSIC_STATE.SILENCE;
statePrevious = state;
// music types
musicIntro = -1;
musicLoop = -1;
bossIntro = -1;
bossLoop = -1;
musicJingle = -1;
musicEffect = -1;
currentMusic = -1;
// music asset indexes
musicIntroAsset = -1;
musicLoopAsset = -1;
bossIntroAsset = -1;
bossLoopAsset = -1;
musicJingleAsset = -1;
musicEffectAsset = -1;
// previous positions for every track type:
previousPositionIntro = 0;
previousPositionLoop = 0;
previousPositionBossIntro = 0;
previousPositionBossLoop = 0;
previousPositionJingle = 0;
previousPositionEffect = 0;
// default fall back (only musicIntro(1) or bossIntro(3))
queuedState = statePrevious;
priorityMusicState = MUSIC_STATE.MUSIC_INTRO;

// volume variables.
sfxGain = 100;
bgmGain = 100;
masterGain = 75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug keys

/*
if (keyboard_check_pressed(vk_f6)) {
    player_get_lives(1);
}
else if (keyboard_check_pressed(vk_f7)) {
    with (objPlayer) {
        player_get_invincibility();
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle music state(s)

/*
    A little warning:
    
    - This code was "nasty made in a rush - (c) Overbound" for v1.0.4's original release.
    - Then it was improved a little bit by me (nik) by making it more readable (did not make it more stable)
    - And now you're here, in it's v1.1.2 implementation, with a fourth state variable just to fix effect&lt;-&gt;jingle stacking ;-;
      that fourth variable is queuedState, it holds the state that should be resumed after both jingle and effect stop.
      It's always BOSS_LOOP/INTRO or MUSIC_LOOP/INTRO, it can never be SILENCE, if it is, priorityMusicState will be used.
    
    Only proceed if you're thy braveful and thy mightful
    
    - Nikita Krapivin.
*/

switch (state) { // MUSIC_STATE.
    case MUSIC_STATE.SILENCE: // silence
        // Do nothing.
        break;
    case MUSIC_STATE.MUSIC_INTRO: // Play Music Intro
        if (!audio_is_playing(musicIntro)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.MUSIC_LOOP: // Play Music Loop
        if (!audio_is_playing(musicLoop)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.BOSS_INTRO: // Play Boss Intro
        if (!audio_is_playing(bossIntro)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.BOSS_LOOP: // Play Boss Loop
        if (!audio_is_playing(bossLoop)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.JINGLE: // Play Jingle
        if (!audio_is_playing(musicJingle)) {
            var pstate = priorityMusicState;
            if (queuedState != MUSIC_STATE.SILENCE) {
                pstate = queuedState;
                queuedState = MUSIC_STATE.SILENCE;
            }
            else if (statePrevious != MUSIC_STATE.JINGLE) {
                pstate = statePrevious;
            } 
            
            play_previous(pstate);
        }
        break;
    case MUSIC_STATE.EFFECT: // Play Effect
        var levelHandle = noone;
        if (instance_exists(objLevel)) {
            levelHandle = objLevel;
        } else if (instance_exists(objSSLevel)) {
            levelHandle = objSSLevel;
        }
        
        if (instance_exists(levelHandle)) { 
            if (!audio_is_playing(musicEffect) &amp;&amp; !levelHandle.cleared) {
                if (statePrevious == MUSIC_STATE.JINGLE &amp;&amp; audio_is_playing(musicJingle)) {
                    audio_sound_gain(musicJingle, bgmGain / 100, 200);
                    state = MUSIC_STATE.JINGLE;
                    break;
                }
                else {
                    var pstate = priorityMusicState;
                    // never ever play an effect after an effect, effects should NEVER stack.
                    // oh also guard from SILENCE states since drowning may trigger a silence state when quitting.
                    // (drowning is always supposed to restart the level OST, since resume is set to false there)
                    if (queuedState != MUSIC_STATE.SILENCE) {
                        pstate = queuedState;
                        queuedState = MUSIC_STATE.SILENCE;
                    }
                    else if (statePrevious != MUSIC_STATE.SILENCE &amp;&amp; statePrevious != MUSIC_STATE.EFFECT) {
                        pstate = statePrevious;
                    }
                    
                    play_previous(pstate);
                }
            }
       }
       break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Synchronize sound variables with the audio system.
audio_master_gain(masterGain / 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all audio
stop_all_music(false, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
