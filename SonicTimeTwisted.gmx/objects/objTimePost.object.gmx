<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPastPost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reaction_script</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>player_reaction_time_post</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tag</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_id</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>noone</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting the sprite using the dedicated event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Null</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control player
// custom player state
with player_id
{
    // rotate around post
    x = other.x+sine[angle_wrap(timeline_position*30)]*10*facing;
    if timeline_position&gt;3 and timeline_position&lt;10 depth = other.depth+1; else
    depth = 0;
    // activate on end of animation
    if timeline_position&gt;=12
    {
        // reset time post
        other.alarm[0] = 40;
        other.player_id = noone;
        // confirm time travel
        objProgram.spawn_tag = other.tag;
        objProgram.spawn_time = objLevel.timer;
        objProgram.time_traveling = facing;
        // camera
        camera.alarm[0] = 128;
        // audio
        var _chant = sndChantPast;
        if (objProgram.in_past) {
            _chant = sndChantFuture;
        }
        
        var _locChantStream = tr_stream_loc_sound(_chant);
        if (_locChantStream) {
            show_debug_message("Using localized chant!");
            with (objResources) {
                chantAsset = _locChantStream;
                chantInstance = play_sfx(_locChantStream, 1);
            }
        }
        else {
            show_debug_message("Using prebaked chant!");
            play_sfx(_chant, 1);
        }
        
        // time travel
        player_is_exiting();
        exit;
    }
    // cancelling
    if (input_axis_x() == -facing)
    {
        // reset time post
        other.alarm[0] = 24;
        other.player_id = noone;
        // animate
        animation_new = "brake";
        timeline_speed = 1;
        // movement and collision
        x = other.x;
        xspeed = 8*facing;
        // camera
        camera.alarm[0] = -1;
        // other
        depth = 0;
        // running
        player_is_running();
        exit;
    }
    // jumping
    if input_check_pressed(cACTION)
    { 
        // reset time post
        other.alarm[0] = 24;
        other.player_id = noone;
        // movement and collision
        x = other.x;
        xspeed = 8*facing;
        // camera
        camera.alarm[0] = -1;
        // other
        depth = 0;
        // running
        player_is_jumping();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting the sprite, depends on the time period and the locale
// Call this when a room loads or when the current language changes
if objProgram.in_past == true {
    if(sprite_exists(objResources.timePostFutureSprite))
    {
        sprite_index = objResources.timePostFutureSprite;
    }
    else
    {
        sprite_index = sprFuturePost;
    }
}
else {
    if(sprite_exists(objResources.timePostPastSprite))
    {
        sprite_index = objResources.timePostPastSprite;
    }
    else
    {
        sprite_index = sprPastPost;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.5</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,49</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
