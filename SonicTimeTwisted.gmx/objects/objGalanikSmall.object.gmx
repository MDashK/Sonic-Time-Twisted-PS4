<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGalanikSmall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
x = objPPBossController.x;
image_speed = 0;
timeline_index = animGalanikSmallFire;
timeline_running = false;
timeline_loop = false;
remove = 0;
state = "entering";
firingCount = 0;
fireball = noone;
ySpeed = 2;
zSpeed = 0.002;
zPosition = 0.25;
x3StepsBack = x;
y3StepsBack = y;
x2StepsBack = x;
y2StepsBack = y;
afterImageAlpha = 0.5;
afterImageBlend1 = c_red;
afterImageBlend2 = c_blue;
afterImageBlend3 = c_green;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart firing
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blur
x3StepsBack = x2StepsBack
y3StepsBack = y2StepsBack
x2StepsBack = xprevious;
y2StepsBack = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
switch (state)
{
case "entering":
    if (instance_exists(objLevel.player[0]))
    {
        if (image_xscale &gt; zPosition or image_yscale &gt; zPosition)
        {
            image_xscale = max(image_xscale - zSpeed, zPosition);
            image_yscale = max(image_yscale - zSpeed, zPosition);
        }
        y -= ySpeed;
        var cameraCentre = view_yview[0] + (view_hview[0] * 0.5);
        if (y &lt;= cameraCentre)
        {
            y = cameraCentre;
            event_user(0);
        }
    }
    break;

case "waiting":
    y = view_yview[0] + (view_hview[0] * 0.5);
    break;

case "exiting":
    if (instance_exists(objLevel.player[0]))
    {
        if (image_xscale &lt; 1 or image_yscale &lt; 1)
        {
            image_xscale = min(image_xscale + zSpeed, 1);
            image_yscale = min(image_yscale + zSpeed, 1);
        }
        y += ySpeed;
        if (y &gt;= view_yview[0] + view_hview[0] + 6)
        {
            with (objGalanik)
            {
                play_sfx(sndQuake, 10);
                state = 5;
            }
            instance_destroy();
        }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire
firingCount++;
timeline_position = 0;
timeline_running = true;
var target = noone;
with (objLevel.player[0])
{
    if (terrain_id != noone)
    {
        target = terrain_id;
    }
    else
    {
        target = instance_nearest(x, y, objBossPlatform);
    }
}
if (instance_exists(fireball))
{
    instance_destroy(fireball);
}
fireball = instance_create(x, y, objGalanikFireball);
fireball.platformId = target;
play_sfx(sndGalacnikAttack, 2);
state = "waiting";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw After-Images and self.
if (xprevious != x || yprevious != y)
{
    var xdir = sign(x - xprevious);
    var ydir = sign(y - yprevious);
    if (x3StepsBack != x2StepsBack || y3StepsBack != y2StepsBack)
    {
        d3d_set_fog(1, afterImageBlend3, 0, 0);
        draw_sprite_ext(sprite_index, image_index, x3StepsBack + xdir * 3, y3StepsBack - ydir * 3, image_xscale, image_yscale, 0, c_white, afterImageAlpha);
        d3d_set_fog(0, c_white, 0, 0);
    }
    if (xprevious != x2StepsBack || yprevious != y2StepsBack)
    {
        d3d_set_fog(1, afterImageBlend2, 0, 0);
        draw_sprite_ext(sprite_index, image_index, x2StepsBack + xdir * 3, y2StepsBack - ydir * 3, image_xscale, image_yscale, 0, c_white, afterImageAlpha);
        d3d_set_fog(0, c_white, 0, 0);
    }
    d3d_set_fog(1, afterImageBlend1, 0, 0);
    draw_sprite_ext(sprite_index, image_index, xprevious + xdir * 3, yprevious - ydir * 3, image_xscale, image_yscale, 0, c_white, afterImageAlpha);
    d3d_set_fog(0, c_white, 0, 0);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
