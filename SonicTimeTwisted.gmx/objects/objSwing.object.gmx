<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAASwingPole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swinging vine
image_speed = 0;
remove = 0;
metronome = 0;
metronome_speed = 3;
oscillation = 0;
total_nodes = 12;
largest_absolute_direction = 135;
node_distance = 8;
reaction_script=player_reaction_grab_swing;
active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reaction_script=player_reaction_grab_swing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and animation
metronome = (metronome + metronome_speed) mod 360;
// calculate oscillation and move nodes
var v_sine = dsin(metronome);
for (var node = 1; node &lt; total_nodes + 1; node++) {
    oscillation = v_sine * node * degrees_per_node;
    node_x[ node ] = node_x[ node - 1 ] + dsin(oscillation) * node_distance;
    node_y[ node ] = node_y[ node - 1 ] + dcos(oscillation) * node_distance;
}
x = node_x[ total_nodes ];
y = node_y[ total_nodes ];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control player
if active
    with player_id {
    
        x = other.x;
        y = other.y;
    
        if input_check_pressed(cACTION) {
            // removing the "cACTION pressed" bit so that the instashield/flight/glide doesn't immediately activate
            objProgram.inputManager.state_press = objProgram.inputManager.state_press &amp; (~cACTION);
            objProgram.inputManager.state_press = objProgram.inputManager.state_press &amp; (~cA);
            objProgram.inputManager.state_press = objProgram.inputManager.state_press &amp; (~cB);
            objProgram.inputManager.state_press = objProgram.inputManager.state_press &amp; (~cC);
            
            // sound
            play_sfx(sndJump, 0);
            
            other.active = false;
            other.player_id = noone;
            
            var ground_speed;
            // animate
            animation_new = "spin";
            timeline_speed = 1/max(5-abs(xspeed), 1);
            image_angle = 0;
            
            // states and flags
            state = player_state_fall;
            spinning = true;
            jumping = true;
            jump_action = true;
            spindashing = false;
            xspeed = (-dcos(other.oscillation)*other.metronome_speed)*sign(other.oscillation);
            yspeed = -5;
            sprite_y_offset = 0;
            
            // set air state
            player_in_air();
            other.reaction_script=noone;
            other.alarm[0] = 60;
        
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial setup
degrees_per_node = largest_absolute_direction / total_nodes;
node_x[ 0 ] = xstart;
node_y[ 0 ] = ystart;
for (var node = 1; node &lt; total_nodes + 1; node++) {
    node_x[ node ] = xstart;
    node_y[ node ] = ystart + (node * node_distance);
}
x = node_x[ total_nodes ];
y = node_y[ total_nodes ];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
var draw_color = draw_get_color();
draw_set_color(c_lime);
for (var node = 0; node &lt; total_nodes; node++) {
    draw_line(node_x[ node ], node_y[ node ], node_x[ node + 1 ], node_y[ node + 1 ]);
}
draw_set_color(draw_color);
/*
var this_degree, this_distance, next_degree,  next_distance;
var draw_color = draw_get_color();
draw_set_color(c_lime);
for (var i = 0; i &lt; total_nodes; i++) {
    this_degree = sine * i * degrees_per_node;
    this_distance = i * node_distance;
    next_degree = sine * (i + 1) * degrees_per_node;
    next_distance = (i + 1) * node_distance;
    draw_line(  xstart + dsin(this_degree) * this_distance,
                ystart + dcos(this_degree) * this_distance,
                xstart + dsin(next_degree) * next_distance,
                ystart + dcos(next_degree) * next_distance);
}
draw_set_color(draw_color);
*/
/*
for (var i = 0; i &lt; total_nodes; i++) {
    draw_sprite_ext(sprite_index, 0,
        xstart + dsin(sine * (i * degrees_per_node)) * (i * sprite_height),  //11.25
        ystart + dcos(sine * (i * degrees_per_node)) * (i * sprite_height),
        1, 1, 
        dsin(sine * ((i + 1) * degrees_per_node)) * (largest_absolute_direction * 2), 
        image_blend, image_alpha);
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var sine = dsin(image_index);
var draw_color = draw_get_color();
draw_set_color(c_lime);
var x1 = xstart;
var y1 = ystart;
var x2 = x1 + dsin(sine * degrees_per_node) * node_distance;
var y2 = y1 + dcos(sine * degrees_per_node) * node_distance;
draw_line(x1, y1, x2, y2);
for (var i = 1; i &lt; total_nodes; i++) {
    x1 = x2;
    y1 = y2;
    x2 = x1 + dsin(sine * (i + 1) * degrees_per_node) * node_distance;
    y2 = y1 + dcos(sine * (i + 1) * degrees_per_node) * node_distance;
    draw_line(x1, y1, x2, y2);
}
draw_set_color(draw_color);
*/
/*
var this_degree, this_distance, next_degree,  next_distance;
var draw_color = draw_get_color();
draw_set_color(c_lime);
for (var i = 0; i &lt; total_nodes; i++) {
    this_degree = sine * i * degrees_per_node;
    this_distance = i * node_distance;
    next_degree = sine * (i + 1) * degrees_per_node;
    next_distance = (i + 1) * node_distance;
    draw_line(  xstart + dsin(this_degree) * this_distance,
                ystart + dcos(this_degree) * this_distance,
                xstart + dsin(next_degree) * next_distance,
                ystart + dcos(next_degree) * next_distance);
}
draw_set_color(draw_color);
*/
/*
for (var i = 0; i &lt; total_nodes; i++) {
    draw_sprite_ext(sprite_index, 0,
        xstart + dsin(sine * (i * degrees_per_node)) * (i * sprite_height),  //11.25
        ystart + dcos(sine * (i * degrees_per_node)) * (i * sprite_height),
        1, 1, 
        dsin(sine * ((i + 1) * degrees_per_node)) * (largest_absolute_direction * 2), 
        image_blend, image_alpha);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
