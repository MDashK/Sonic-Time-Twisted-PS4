<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1024</depth>
  <persistent>0</persistent>
  <parentName>objSceneObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize background
var i;
// defaults
relative_y = .9;
absolute_y = 350;//room_height-(room_height*relative_y);
scale_limit = 3;
instance_create(x,y,objTTFutureRig);
// ocean
for (i=0; i&lt;20; i+=1)
{
    strip[i] = parallax_create(1, backTTFWater, 0, i*8, 32, 8, 0, 0, .98+i*-.02, relative_y, 0, absolute_y+(i*8), 0, 0);
    strip[i].visible = false;
}
stars1= parallax_create(1, backTTFStars1, 0, 0, 320, 224, 0, 0, 1, relative_y, 0, 80, 0, 0);
stars2= parallax_create(1, backTTFStars2, 0, 0, 320, 224, 0, 0, 1, relative_y, 0, 80, 0, 0);
parallax_create(1, backTTFSky, 0, 0, 64, 48, -.25, 0, 1, relative_y, 0, 0, 0, 0);
parallax_create(1, backTTFSky, 0, 48, 64, 32, -.5, 0, 1, relative_y, 0, 48, 0, 0);
parallax_create(1, backTTFSky, 0, 80, 64, 272, 0, 0, 1, relative_y, 0, 80, 0, 0);
water = instance_create(0,2688,objWater);
with water { image_xscale = room_width/16; image_yscale = 84; remove = 0; can_run = true; }
//underwater_rig=parallax_create(1, backTTFTube, 0, 0, 224, 256, 0, 0, .95, relative_y, 146, 328, 512, 0);
// horizon
horizon = parallax_create_sprite(1, sprWaterHorizon, .25, 0, 0, 0, 0, 0, water.y, 0, 0);
horizon.depth = water.depth-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update horizon
//with water other.horizon.absolute_y = y;
//horizon.image_index = objScreen.image_index*0.34;

//star flash
stars1.image_alpha = 0.5+abs(cos(degtorad(objScreen.image_index*2.4)))*0.5;
stars2.image_alpha = 0.5+abs(sin(degtorad(objScreen.image_index*2.4)))*0.5;
/*
if instance_exists(underwater_rig) {
    with objLevel.player[0] {
         if underwater == true {
            
            other.underwater_rig.depth = 20;
            
         }
        else other.underwater_rig.depth = 1025;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scale water strips
var offset, scale, i;
// get scale based on offset
offset = floor(view_yview[view_current]*relative_y)+absolute_y;
scale = 1;
with water scale = median((y-offset)/160, -other.scale_limit, other.scale_limit);
// apply scale
for (i=0; i&lt;20; i+=1)
{
    strip[i].image_yscale = scale;
    strip[i].absolute_y = absolute_y+(i*8)*scale;
    with strip[i] event_perform(ev_draw, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
