<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprField</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objNonSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
reaction_script = player_reaction_rr_wall_run;
width = 160;//180
height = 360;
minimum_speed = 5;
cycles = 2.25;
cycle_height = height / cycles;
player_id[0] = noone;
player_id[1] = noone;
position[0] = 0;
position[1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control player
for (var n = 0; n &lt; 2; ++n) {
    if (player_id[n] != noone) {
        with (player_id[n]) {
            var horizontal_sign = input_axis_x();
            if (horizontal_sign == 0) {
                xspeed -= min(abs(xspeed), ground_friction) * sign(xspeed);
            }
            else {
                if (xspeed != 0 and sign(xspeed) != horizontal_sign) {
                    xspeed += deceleration * horizontal_sign;
                }
                else if (abs(xspeed) &lt; speed_cap) {
                    xspeed += acceleration * horizontal_sign;
                    if (abs(xspeed) &gt; speed_cap) {
                        xspeed = speed_cap * horizontal_sign;
                    }
                }
            }
            
            other.position[n] = clamp(other.position[n] + (xspeed / 2), 0, other.height - (offset_y + 1));
            var w = (other.width - (offset_x * 2)) * 0.5;
            var r = ((other.position[n] / other.cycle_height) * 360);
            x = other.bbox_left + dsin(r) * w;
            y = other.bbox_bottom - (offset_y + 1) - other.position[n];
            if (other.position[n] == other.height - (offset_y + 1)) {
                player_is_running();
                other.player_id[n] = noone;
                other.remove = 1;
                exit;
            }
            
            // slide if moving too slow
            if (abs(xspeed) &lt; other.minimum_speed) {
                player_is_falling();
                other.player_id[n] = noone;
                other.remove = 1;
                exit;
            }
            
            // jumping
            if (input_check_pressed(cACTION)) {
                player_is_jumping();
                other.player_id[n] = noone;
                other.remove = 1;
                exit;
            }
            
            // animate
            if (sign(xspeed) &gt; 0) {
                image_index = (other.position[n] / other.cycle_height) * 14;
            }
            else {
                image_index = ((other.sprite_height - (offset_y + 1) - other.position[n]) / other.cycle_height) * 14;
            }
            
            image_angle = angle;
            
            // set facing
            facing = sign(xspeed);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
